[{"body":"","link":"https://blog.soufrabi.com/","section":"","tags":null,"title":""},{"body":"","link":"https://blog.soufrabi.com/categories/","section":"categories","tags":null,"title":"Categories"},{"body":"/etc/fstab configuration\n/etc/fstab file begins on debian as\n1# /etc/fstab: static file system information. 2# 3# Use \u0026#39;blkid\u0026#39; to print the universally unique identifier for a 4# device; this may be used with UUID= as a more robust way to name devices 5# that works even if disks are added and removed. See fstab(5). 6# 7# systemd generates mount units based on this file, see systemd.mount(5). 8# Please run \u0026#39;systemctl daemon-reload\u0026#39; after making changes here. 9# 10# \u0026lt;file system\u0026gt; \u0026lt;mount point\u0026gt; \u0026lt;type\u0026gt; \u0026lt;options\u0026gt; \u0026lt;dump\u0026gt; \u0026lt;pass\u0026gt; 11# / was on /dev/sda2 during installation 12# /boot/efi was on /dev/sda1 during installation Common fstab entries fat32/vfat for boot 1UUID=ABAC-2915 /boot/efi vfat umask=0077 0 1 btrfs 1UUID=142abb53-edaf-dd43-caac-9ba6ca37731e / btrfs rw,noatime,space_cache=v2,compress=zstd,ssd,discard=async,subvol=@ 0 0 2UUID=142abb53-edaf-dd43-caac-9ba6ca37731e /home btrfs rw,noatime,space_cache=v2,compress=zstd,ssd,discard=async,subvol=@home 0 0 3UUID=142abb53-edaf-dd43-caac-9ba6ca37731e /var/lib/lxd/storage-pools btrfs rw,noatime,space_cache=v2,compress=zstd,ssd,discard=async,subvol=@lxd 0 0 Special folders\n/var/lib/lxd/storage-pools /var/lib/docker/btrfs Not needed but can be considered\n/var/lib/libvirt/images Reference :- Archwiki Fstab ","link":"https://blog.soufrabi.com/post/fstab/","section":"post","tags":["linux"],"title":"Fstab"},{"body":"","link":"https://blog.soufrabi.com/tags/linux/","section":"tags","tags":null,"title":"Linux"},{"body":"","link":"https://blog.soufrabi.com/post/","section":"post","tags":null,"title":"Posts"},{"body":"","link":"https://blog.soufrabi.com/tags/","section":"tags","tags":null,"title":"Tags"},{"body":"","link":"https://blog.soufrabi.com/categories/technology/","section":"categories","tags":null,"title":"Technology"},{"body":"Configuring grub for a multi OS system\nMain grub configuration file is /etc/default/grub\nDefault Entry = Last Saved 1GRUB_SAVEDEFAULT=true 2GRUB_DEFAULT=saved Note :\nComment out entries such as GRUB_DEFAULT=0 for this to take effect This does not work if /boot partition is in btrfs or lvm filesystem Detect other bootable OSes Activate os-prober\n1GRUB_DISABLE_OS_PROBER=false Console For a TUI,\n1GRUB_TERMINAL=console Update grub.cfg On Debian\n1sudo update-grub On Arch/Fedora (Even Debian)\n1sudo grub-mkconfig -o /boot/grub/grub.cfg Add custom entry Note : Place custom grub entries in /etc/grub.d/ not in /etc/default/grub.d/\nTo add custom menus and submenus edit the file /etc/grub.d/40_custom\nExamples Standard 1# \u0026#34;Shutdown\u0026#34; menu entry 2menuentry \u0026#34;System shutdown\u0026#34; { 3\techo \u0026#34;System shutting down...\u0026#34; 4\thalt 5} 6 7# \u0026#34;Restart\u0026#34; menu entry 8menuentry \u0026#34;System restart\u0026#34; { 9\techo \u0026#34;System rebooting...\u0026#34; 10\treboot 11} 12 13# \u0026#34;UEFI Firmware Settings\u0026#34; menu entry 14if [ ${grub_platform} == \u0026#34;efi\u0026#34; ]; then 15\tmenuentry \u0026#39;UEFI Firmware Settings\u0026#39; --id \u0026#39;uefi-firmware\u0026#39; { 16\tfwsetup 17\t} 18fi Chainloading a different EFI paritition 1if [ \u0026#34;${grub_platform}\u0026#34; == \u0026#34;efi\u0026#34; ]; then 2\tmenuentry \u0026#34;Debian on Different SSD\u0026#34; { 3\tsavedefault 4\tinsmod part_gpt 5\tinsmod fat 6\tinsmod chain 7\tsearch --no-floppy --fs-uuid --set=root AB12-CD34 8\tchainloader /EFI/debian/grubx64.efi 9\t} 10fi Windows grub entry 1menuentry \u0026#39;Windows Boot Manager (on /dev/nvme0n1p1)\u0026#39; --class windows --class os $menuentry_id_option \u0026#39;osprober-efi-541A-B5FD\u0026#39; { 2\tsavedefault 3\tinsmod part_gpt 4\tinsmod fat 5\tsearch --no-floppy --fs-uuid --set=root 541A-B5FD 6\tchainloader /EFI/Microsoft/Boot/bootmgfw.efi 7} ","link":"https://blog.soufrabi.com/post/grub/","section":"post","tags":["Linux"],"title":"Grub"},{"body":"Utility to edit UEFI boot entries\nList entries\n1efibootmgr -v Create entry\n1# Not Verified 2# efibootmgr -c -d /dev/sda -p 1 -L LinuxMint -l /EFI/ubuntu/grubx64.efi 3 4 5# Verified 6# Recommended 7sudo efibootmgr --create --disk=/dev/sda --part=4 --label=\u0026#34;fedora_ssd\u0026#34; --loader=\u0026#39;\\EFI\\fedora\\shimx64.efi\u0026#39; 8# 9# This also works 10sudo efibootmgr --create --disk=/dev/sda --part=4 --label=\u0026#34;fedora_ssd2\u0026#34; --loader=\u0026#39;EFI\\fedora\\shimx64.efi\u0026#39; 11# Windows\n1sudo efibootmgr --create --disk=/dev/nvme0n1 --part=1 --label=\u0026#34;windows_test\u0026#34; --loader=\u0026#39;\\EFI\\Microsoft\\Boot\\bootmgfw.efi\u0026#39; for windows path can also be \\EFI\\Boot\\BootX64.efi\nBoth seem to work fine 'part' should specify the partition number of the EFI parition (FAT32) vfat filesystem\nDelete entry\n1sudo efibootmgr -B -b boot_number_to_be_deleted or\n1sudo efibootmgr --delete-bootnum --bootnum 0 when passing the boot entry number we are not requested to include the padding 0s. If the bootnum is 000A just write A\nBoot from a specific entry First run (maybe as root)\n1efibootmgr -v Set the entry for one time boot\n1sudo efibootmgr -n XXXX or\n1sudo efibootmgr --bootnext XXXX Reboot\n1sudo reboot Reference youtube linuxconfig.org boot from a specific boot entry ","link":"https://blog.soufrabi.com/post/efibootmgr/","section":"post","tags":["Linux"],"title":"Efibootmgr"},{"body":"","link":"https://blog.soufrabi.com/tags/archlinux/","section":"tags","tags":null,"title":"archlinux"},{"body":"Guide to install archlinux with minimal configuration\nConnect to wifi Enter iwd console\n1iwctl Inside the iwd console\n1device list 2station wlan0 scan 3station wlan0 get-networks 4station wlan0 connect \u0026#34;SSID_value\u0026#34; Partiion Use fdisk or cfdisk to partition the drives\nfdisk options\nfor FAT32 partiton set the type to 1. EFI using t\nAssign filesystem types\n1mkfs.fat -F32 /dev/sda1 2mkfs.ext4 /dev/sda2 After partitioning is complete the directory structure should look like this\n1. 2└── mnt 3 ├── boot 4 │ └── efi 5 ├── etc 6 │ └── fstab 7 └── home Use genfstab command to generate /etc/fstab\n1genfstab -U /mnt \u0026gt;\u0026gt; /mnt/etc/fstab 2 3# Check using 4cat /mnt/etc/fstab Keyring For archlinux keyring use pacman-key command\nTo refresh some or all keys\n1pacman-key --refresh-keys To reinitialize all keys\n1pacman-key --init 2pacman-key --populate archlinux Chroot Install base packages\n1pacstrap -i /mnt base vi Chroot\n1arch-chroot /mnt Uncomment the following line /etc/pacman.conf using vi editor\n1ParallelDownloads=5 Install Packages\n1sudo pacman -S --needed base-devel 2sudo pacman -S --needed nano neovim 3sudo pacman -S --needed linux linux-headers 4sudo pacman -S --needed linux-lts linux-lts-headers 5sudo pacman -S --needed linux-firmware sof-firmware 6sudo pacman -S --needed sudo # Should be in base-devel 7sudo pacman -S --needed openssh networkmanager wpa_supplicant wireless_tools netctl 8sudo pacman -S --needed ntfs-3g btrfs-progs exfatprogs lvm2 9sudo pacman -S --needed dialog 10sudo pacman -S --needed intel-ucode Graphics Drivers\n1sudo pacman -S --needed mesa 2# sudo pacman -S --needed nvidia nvidia-lts Build Linux Image\n1mkinitcpio -p linux linux-lts Locale Set locale Edit /etc/locale.gen Uncomment the following line\n1en_US.UTF-8 UTF-8 Generate locale\n1locale-gen Create users Set root passwd\n1passwd Create user\n1useradd -m -G wheel name_of_user 2 3# Can also do 4# useradd -m -g users -G wheel name_of_user Set the user's password\n1passwd name_of_user Edit /etc/sudoers\n1EDITOR=nano visudo Uncomment or add the following line\n1%wheel ALL=(ALL) ALL GRUB Installing grub\n1sudo pacman -S --needed grub os-prober dosfstools mtools 2sudo pacman -S --needed efibootmgr Create /boot/efi/EFI directory and mount the FAT32 filesystem in it\n1mkdir -p /boot/efi/EFI 1# mount /dev/sda1 /boot/efi/EFI Now, for UEFI install\n1grub-install --target=x86_64-efi --bootloader-id=\u0026#34;archlinux_grub_uefi\u0026#34; --recheck 2 3# Verify using 4ls -l /boot/grub Copy\n1cp /usr/share/locale/en\\@quot/LC_MESSAGES/grub.mo /boot/grub/locale/en.mo Build /boot/grub/grub.cfg\n1grub-mkconfig -o /boot/grub/grub.cfg Now, exit the chroot environment\n1exit Post install List timezones\n1sudo timedatectl list-timezones Set timezone\n1sudo timedatectl set-timezone Asia/Kolkata Set hardware clock running in UTC\n1sudo timedatectl set-local-rtc 0 Check current timedate settings\n1sudo timedatectl status Set hostname\n1sudo hostnamectl set-hostname archlinux_hostname Edit /etc/hosts\n1127.0.0.1 localhost 2127.0.1.1 archlinux_hostname Now, you may install xorg and window manager or a full blown desktop environment\nExperimental Reflector\n1reflector -c \u0026#34;India\u0026#34; -a 6 --sort rate --save /etc/pacman.d/mirrorlist ","link":"https://blog.soufrabi.com/post/archlinux-install/","section":"post","tags":["archlinux"],"title":"Archlinux Install"},{"body":"Hi!\n","link":"https://blog.soufrabi.com/about/","section":"","tags":null,"title":"About"},{"body":"","link":"https://blog.soufrabi.com/archives/","section":"","tags":null,"title":""},{"body":"","link":"https://blog.soufrabi.com/series/","section":"series","tags":null,"title":"Series"}]